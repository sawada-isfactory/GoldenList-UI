<?php
namespace GoldenList\Controller;

use App\Controller\Api\DownloadController;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Auth\PasswordHasherFactory;
use Cake\Network\Exception\NotFoundException;
use GoldenList\Controller\AppController;
use GoldenList\Lib\BodaisEngineApi;
use Cake\ORM\TableRegistry;

/**
 * MasterProjects Controller
 *
 * @property \GoldenList\Model\Table\MasterProjectsTable $MasterProjects
 */
class MasterProjectsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if ($this->request->is('ajax')) {
            $this->RequestHandler->renderAs($this, 'json');
            $this->response->type('application/json');
        }
        $this->loadModel('GoldenList.ExportFileReportDatas');
        /// $this->loadComponent('Csrf');
    }

    public function index()
    {
        $this->set('bg', true);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $masterProject = $this->MasterProjects->newEntity();
        if ($this->request->is('post')) {
            $this->request->data('goldenlist_sidebar_project.project_name', $this->request->data['project_name']);
            $masterProject = $this->MasterProjects->patchEntity($masterProject, $this->request->data, ['associated' => ['GoldenlistSidebarProjects']]);

            if (!$masterProject->errors()) {
                // クライアントの登録確認
                $masterClientEntity = $this->MasterProjects->MasterClients->find()->where(['user_id' =>  $this->Auth->user('id')])->first();
                if (!$masterClientEntity) {
                    $masterClientEntity = $this->MasterProjects->MasterClients->newEntity(
                        [
                            'user_id' => $this->Auth->user('id'),
                            'group_id' => $this->Auth->user('group_id'),
                            'client_name' => $this->Auth->user('username'),
                        ]
                    );
                    $this->MasterProjects->MasterClients->save($masterClientEntity);
                }

                $masterProject->clients_master_id = $masterClientEntity->id;
                $masterProject->analysis_setting_files_master_id = null;
                $masterProject->goldenlist_sidebar_project->master_client_id =  $masterClientEntity->id;
                $masterProject->goldenlist_sidebar_project->project_name =  $masterProject->project_name;

                if ($this->MasterProjects->save($masterProject)) {
                    $this->Flash->success(__('The master project has been saved.'));
                    return $this->redirect(['action' => 'edit', $masterProject->id]);
                } else {
                    $this->Flash->error(__('The master project could not be saved. Please, try again.'));
                }
            }
        }

        $this->set(compact('masterProject'));
        $this->set('_serialize', ['masterProject']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Master Project id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $masterProject = $this->MasterProjects->get($id, [
            'contain' => [
                'MasterCallLists.GoldenlistStatusEngines',
                'GoldenlistSidebarProjects',
                'GoldenlistLoyalCustomers',
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $this->request->data('goldenlist_sidebar_project.project_name', $this->request->data['project_name']);
            $masterProject = $this->MasterProjects->patchEntity($masterProject, $this->request->data, ['associated' => ['GoldenlistSidebarProjects']]);
            if ($this->MasterProjects->save($masterProject)) {
                if (!$this->request->is('ajax')) {
                    $this->Flash->success(__('The master project has been saved.'));
                    return $this->redirect(['action' => 'index']);
                }
            }
            if (!$this->request->is('ajax')) {
                $this->Flash->error(__('The master project could not be saved. Please, try again.'));
            }
        }
        // グラフMAX数
        $MasterMainItems = TableRegistry::get('GoldenList.MasterMainItems');
        $graphCount = $MasterMainItems->find()->where(['attribute' => 'bodais_value'])->count();

        // エンジンステータス
        try {
            $api = new BodaisEngineApi();
            $apiResult = $api->checkEngineStatuses($id);
            $engineStatuses = [];
            foreach ($apiResult as $data) {
                if (!$this->ExportFileReportDatas->find()->where(['master_call_list_id' => $data['master_call_list_id']])->count()) {
                    continue;
                }
                $engineStatuses[$data['master_call_list_id']] = ['status' => $data['status']];
            }
        } catch (\Exception $e) {
            $this->set('engineStatusError', true);
        }

        $this->set(compact('masterProject','graphCount','engineStatuses'));
        $this->set('_serialize', ['masterProject']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Master Project id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    /**
     * Delete method
     *
     * @param string|null $id Master CallList id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $this->log($this->request->data);
        $masterProject = $this->MasterProjects->get($id);
        if ($this->MasterProjects->delete($masterProject)) {
            $this->set('result', 'OK');
            $this->set('_serialize', ['result']);
        } else {
            throw new InternalErrorException();
        }
    }

    public function download($id = null)
    {
        $api = new BodaisEngineApi();
        $params = compact('id');
        if ($this->request->is('ajax')) {
            $this->log('ajax');
            $api->checkCanDownloadReport($params);
            $this->set('result', 'OK');
            $this->set('_serialize', ['result']);
        } else {
            $this->autoRender = false;
            $data = $api->downloadReport($params);
            $filename = 'report' . date('Ymd_His') . '.zip';
            $this->response->download($filename);
            $this->response->body($data);
        }
    }

    public function downloadGoldenLists($id = null)
    {

        $api = new BodaisEngineApi();
        $params = $this->request->query;
        if ($this->request->is('ajax')) {
            $this->log('ajax');
            $api->checkCanDownloadGoldenLists($params);
            $this->set('result', 'OK');
            $this->set('_serialize', ['result']);
        } else {
            $this->autoRender = false;
            $data = $api->downloadGoldenLists($params);
            $filename = 'golden_list' . date('Ymd_His') . '.zip';
            $this->response->download($filename);
            $this->response->body($data);
        }
    }

}

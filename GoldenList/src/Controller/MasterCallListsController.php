<?php
namespace GoldenList\Controller;

use App\Lib\BodaisEngine;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Auth\PasswordHasherFactory;
use Cake\Core\Configure;
use Cake\Network\Exception\BadRequestException;
use Cake\Network\Exception\InternalErrorException;
use Cake\Network\Exception\MethodNotAllowedException;
use Cake\Network\Exception\NotFoundException;
use GoldenList\Controller\AppController;
use GoldenList\Lib\BodaisEngineApi;

/**
 * MasterCallLists Controller
 *
 * @property \GoldenList\Model\Table\MasterCallListsTable $MasterCallLists
 */
class MasterCallListsController extends AppController
{

    public function initialize()
    {

        parent::initialize(); // TODO: Change the autogenerated stub
        if ($this->request->is('ajax')) {
            $this->RequestHandler->renderAs($this, 'json');
            $this->response->type('application/json');
        }

    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($masterProjectId = null)
    {

        $masterProject = $this->MasterCallLists->MasterProjects->get($masterProjectId, ['contain' => 'GoldenlistSidebarProjects']);
        $masterCallList = $this->MasterCallLists->newEntity();
        if ($this->request->is('post')) {
            $this->request->data('goldenlist_sidebar_call_list.call_list_name', $this->request->data['call_list_name']);
            $this->request->data('goldenlist_sidebar_call_list.goldenlist_sidebar_project_id', $masterProject->goldenlist_sidebar_project->id);
            if (!$this->request->data('cap_enable')) {
                $this->request->data('cap_enable', 0);
            } else {
                $this->request->data('cap_enable', 1);
            }
            $masterCallList = $this->MasterCallLists->patchEntity($masterCallList, $this->request->data, ['associated' => ['GoldenlistSidebarCallLists']]);
            $masterCallList->master_project_id = $masterProjectId;
            ////$this->log($masterCallList);
            if (!$masterCallList->errors()) {
                if ($this->MasterCallLists->save($masterCallList)) {
                    if ($masterCallList->file && empty($masterCallList->file['error'])) {
                        ////$this->log('reqStart');
                        ////$this->log($masterCallList);
                        $api = new BodaisEngineApi();
                        $req = [
                            'fileInfo' => $masterCallList->file,
                            'callListId' => $masterCallList->id
                        ];
                        $api->postInsert($req);
                        // ファイル名を保存
                        $status = [
                            'master_call_list_id' => $masterCallList->id,
                            'upload_file_name' => $masterCallList->file['name'],
                            'progress_step' => 2
                        ];
                        $statusEntity = $this->MasterCallLists->GoldenlistStatusEngines->newEntity($status);
                        ////$this->log($statusEntity->errors());
                        $this->MasterCallLists->GoldenlistStatusEngines->save($statusEntity);

                    }
                    $this->Flash->success(__('The master project has been saved.'));
                    return $this->redirect(['action' => 'edit', $masterProjectId, $masterCallList->id]);
                } else {
                    $this->Flash->error(__('The master project could not be saved. Please, try again.'));
                }
            }
        }
        $this->set(compact('masterCallList'));
        $this->set('_serialize', ['masterCallList']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Master CallList id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($masterProjectId = null, $id = null)
    {
        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id, [
            'contain' => ['MasterProjects.GoldenlistSidebarProjects', 'GoldenlistSidebarCallLists', 'GoldenlistStatusEngines']
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            ////$this->log($this->request->data['file']);
            // サイドバー用テーブルの更新
            $this->request->data('goldenlist_sidebar_call_list.call_list_name', $this->request->data['call_list_name']);
            $this->request->data('goldenlist_sidebar_call_list.goldenlist_sidebar_project_id', $masterCallList->master_project->goldenlist_sidebar_project->id);
            $masterCallList = $this->MasterCallLists->patchEntity($masterCallList, $this->request->data, ['associated' => ['GoldenlistSidebarCallLists']]);
            ////$this->log($masterCallList->errors());
            if (!$this->request->data('cap_enable')) {
                $this->request->data('cap_enable', 0);
            } else {
                $this->request->data('cap_enable', 1);
            }

        }
        if ($this->MasterCallLists->save($masterCallList)) {
            if (!$this->request->is('ajax')) {
                $this->Flash->success(__('The master project has been saved.'));
                //return $this->redirect(['action' => 'index']);
            }


        } else {
            ////$this->log($masterCallList->errors());
            if (!$this->request->is('ajax')) {
                $this->Flash->error(__('The master project could not be saved. Please, try again.'));
            }
        }

        $this->set(compact('masterCallList'));
        $this->set('_serialize', ['masterCallList']);
    }

    public function uploadStep1($masterProjectId = null, $id = null)
    {
        $this->request->allowMethod(['post', 'put']);

        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id, [
            'contain' => ['MasterProjects', 'GoldenlistStatusEngines']
        ]);

        $this->log($masterCallList);

        if (empty($masterCallList->goldenlist_status_engine)) {
            $masterCallList->goldenlist_status_engine = $this->MasterCallLists->GoldenListStatusEngines->newEntity();
            $masterCallList->goldenlist_status_engine->master_call_list_id = $id;
        }
        $masterCallList->goldenlist_status_engine->progress_step = 1;
        $masterCallList->goldenlist_status_engine->upload_file_name = $this->request->data['file']['name'];
        $masterCallList->file = $this->request->data['file'];
        $api = new BodaisEngineApi();
        $req = [
            'fileInfo' => $masterCallList->file,
            'callListId' => $masterCallList->id
        ];
        $response = $api->postInsert($req);
        $this->log($masterCallList->file['name']);
        if ($masterCallList->errors()) {
            throw new BadRequestException(json_encode($masterCallList->errors));
        }
        if ($this->MasterCallLists->GoldenListStatusEngines->save($masterCallList->goldenlist_status_engine)) {
            $this->set('result', $masterCallList->goldenlist_status_engine->progress_step);
            $this->set('_serialize', ['result']);
        } else {
            throw new InternalErrorException();
        }

    }

    public function uploadStep4($masterProjectId = null, $id = null)
    {
        $this->request->allowMethod(['post', 'put']);

        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id, [
            'contain' => ['GoldenlistStatusEngines']
        ]);
        ////$this->log($masterCallList);
        $masterCallList->goldenlist_status_engine->progress_step = 4;
        $masterCallList->goldenlist_status_engine->upload_file_name = $this->request->data['fileStep4']['name'];
        $masterCallList->fileStep4 = $this->request->data['fileStep4'];
        $api = new BodaisEngineApi();
        $req = [
            'fileInfo' => $masterCallList->fileStep4,
            'callListId' => $masterCallList->id
        ];
        $api->postInsertGoldenList($req);
        if ($masterCallList->errors()) {
            throw new BadRequestException(json_encode($masterCallList->errors));
        }
        if ($this->MasterCallLists->GoldenListStatusEngines->save($masterCallList->goldenlist_status_engine)) {
            $this->set('result', $masterCallList->goldenlist_status_engine->progress_step);
            $this->set('_serialize', ['result']);
        } else {
            throw new InternalErrorException();
        }
    }

    public function updateCaps($masterProjectId = null, $id = null)
    {

        $this->request->allowMethod(['post', 'put']);

        $this->log(Configure::read('Config.language'));

        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id, [
            'contain' => ['MasterProjects.GoldenlistSidebarProjects', 'GoldenlistStatusEngines']
        ]);

        if (empty($masterCallList->goldenlist_status_engine) || $masterCallList->goldenlist_status_engine->progress_step < 2) {
            $masterCallList->goldenlist_status_engine->progress_step = 2;
        }

        if (!$this->request->data('cap_enable')) {
            $this->request->data('cap_enable', 0);
            $this->log($this->request->data);
            foreach ($this->request->data as $param => $data) {

                if ($param == 'cap_enable' || $param == 'cv_target_number') {
                    continue;
                }
                unset($this->request->data[$param]);
            }
        } else {
            $this->request->data('cap_enable', 1);
        }

        $masterCallList = $this->MasterCallLists->patchEntity($masterCallList, $this->request->data, ['associated' => ['GoldenlistStatusEngines']]);
        if ($masterCallList->errors()) {
            $this->response->statusCode(400);
            $this->set('errors', $this->_getErrorStr($masterCallList->errors()));
            $this->set('_serialize', ['errors']);
            return;
        }

        if ($this->MasterCallLists->save($masterCallList)) {
            // スコア再生成
            $this->_createScore($masterCallList);
            $this->set('result', $masterCallList->goldenlist_status_engine->progress_step);
            $this->set('_serialize', ['result']);
        } else {
            throw new InternalErrorException();
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Master CallList id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($masterProjectId = null, $id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $this->log($this->request->data());
        if (is_null($id) && empty($this->request->data('id'))) {
            throw new BadRequestException();
        }
        if (is_null($id)) {
            $id = $this->request->data('id');
        }

        ////$this->log($this->request->data);
        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id);
        if ($this->MasterCallLists->delete($masterCallList)) {
            // レポート再生成
            $api = new BodaisEngineApi();
            $api->regenerateReport(['id' => $masterProjectId]);

            $this->set('result', 'OK');
            $this->set('_serialize', ['result']);
        } else {
            throw new InternalErrorException();
        }
        //return $this->redirect(['action' => 'index']);
    }

    public function download($masterProjectId = null, $id = null)
    {
        $masterCallList = $this->MasterCallLists->findProjectBy($masterProjectId, $id, ['contain' => ['GoldenlistStatusEngines']]);

        if (empty($masterCallList)) {
            throw new NotFoundException();
        }

        $api = new BodaisEngineApi();
        $params = ['master_call_list_ids' => [$id]];

        // Ajaxの場合は存在確認のみ
        if ($this->request->is('ajax')) {
            $this->log('ajax');
            $api->checkCanDownloadGoldenLists($params);

            if (empty($masterCallList->goldenlist_status_engine) || $masterCallList->goldenlist_status_engine->progress_step < 3) {
                $masterCallList->goldenlist_status_engine->progress_step = 3;
                $this->MasterCallLists->save($masterCallList);
            }

            $this->set('result', $masterCallList->goldenlist_status_engine->progress_step);
            $this->set('_serialize', ['result']);
        } else {
            $this->autoRender = false;
            $data = $api->downloadGoldenLists($params);
            $filename = 'call_list' . date('Ymd_His') . '.zip';
            $this->response->download($filename);
            $this->response->body($data);
        }
    }


    public function checkStatus($masterProjectId = null, $id = null)
    {
        $api = new BodaisEngineApi();
        $result = $api->checkEngineStatus($id);
        if ($api->isStatusError($result)) {
            throw new InternalErrorException();
        } elseif ($api->isStatusRunning($result)) {
            $result = 'running';
        } else {
            $result = 'OK';
        }
        $this->set('result', $result);
        $this->set('_serialize', ['result']);
    }

    private function _createScore($masterCallList)
    {
        $api = new BodaisEngineApi();
        if ($this->_canCreateScore($api, $masterCallList->id)) {
            $req = [
                'callListId' => $masterCallList->call_list_id
            ];
            $api->createScore($req);
        }
    }

    private function _canCreateScore($api, $id)
    {
        try {
            // ファイルダウンロード可能状態ならレポート再生成を実施
            $params = ['master_call_list_ids' => [$id]];
            $api->checkCanDownloadGoldenLists($params);
        } catch (\Exception $e) {
            return false;
        }
        return true;
    }

    private function _getErrorStr($errors)
    {
        $this->log(Configure::read('Config.language'));
        foreach ($errors as $key => $error) {
            $errors[$key] = array_map(function ($val) {
                return __d('golden__list', $val);
            }, array_values($error));
        }
        $this->log($errors);
        return $errors;
    }
}
